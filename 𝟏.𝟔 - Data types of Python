-----------------------------<>-------------------------------<>--------------------------------

<|>  𝐃𝐚𝐭𝐚 𝐓𝐲𝐩𝐞 𝐨𝐟 𝐏𝐲𝐭𝐡𝐨𝐧  <|>
          It is the classification of data items in programming.
        >> Variable store the different types of data/value so it is important to known about which data types of value store by variable.

  <::> 𝙋𝙮𝙩𝙝𝙤𝙣 𝙙𝙖𝙩𝙖 𝙩𝙮𝙥𝙚 -->> Few points need to take care about data type.

              :: We can find the data types of any object with help of type() function.
              :: Python is capable of finding data types of assigned value.
              :: If we want to specify the data types in python, we can use constructor function.
              :: Python has different text type(numeric , alpha , character), each text contain different data types.
                                                                        
---------------------------<>--------------------------------------<>------------------------------

<|>  𝐓𝐲𝐩𝐞𝐬 𝐨𝐟 𝐃𝐚𝐭𝐚 𝐓𝐲𝐩𝐞  <|>    

                                         | <> 𝑷𝒚𝒕𝒉𝒐𝒏 𝑫𝒂𝒕𝒂 𝑻𝒚𝒑𝒆 <> |
                                                    |||||  
     |:|                      |:|                    |:|                    |:|                    |:|
     \1/                      \2/                    \3/                    \4/                    \5/
   𝗡𝘂𝗺𝗲𝗿𝗶𝗰                 𝗗𝗶𝗰𝘁𝗶𝗼𝗻𝗮𝗿𝘆                𝗕𝗼𝗼𝗹𝗲𝗮𝗻                  𝗦𝗲𝘁                𝗦𝗲𝗾𝘂𝗲𝗻𝗰𝗲 𝗧𝘆𝗽𝗲
   \/                                                                                           \/
    \>> 1. Integer                                                                                \>> 1. String
        2. float                                                                                      2. List
        3. Complex                                                                                    3. Tuple

----------------------------<>-----------------------------------<>-----------------------------
                            <><><><><><><><><> 1 <><><><><><><><><>

|< 𝟏 >| -->> 𝗡𝘂𝗺𝗲𝗿𝗶𝗰 = It only store the number value.
"""""""""""""""""""""
      1. 𝑰𝒏𝒕𝒆𝒈𝒆𝒓 -->> It can be of any length , whole numbers from negative to positive , limited by the memory available.
     ''''''''''''   
                for Example --  a = 10                               x = -82
                                b = 200                              y = -684964
                                c = 5000                             z = -645468276287626
                                d = 990900                           anylength = - 62768887645173 , +452352452895  , -78627 , +82893

                  <::> 𝘾𝙝𝙚𝙘𝙠 𝘿𝙖𝙩𝙖 𝙏𝙮𝙥𝙚 -->> using type() function.
                              code - x = 10
                                     print(x)          #output = 10
                                     print(type(x))    #output = <class 'int'>      (Data type of value is integer).
                                      
      2. 𝑭𝒍𝒐𝒂𝒕  -->> Float value assigned with decimal. Floating point are seperated by upto 15 decimal points.
      '''''''''
                for Example --  a = 1.34
                                b = 3.3242323
                                c = 34325.453455345
                                d = 1244.34e3245  (Scientic notation) exist e alphabet in float.

                  <::> 𝘾𝙝𝙚𝙘𝙠 𝘿𝙖𝙩𝙖 𝙏𝙮𝙥𝙚 -->> using type() function.
                              code - x = 10.07
                                     print(x)          #output = 10.07
                                     print(type(x))    #output = <class 'float'>      (Data type of value is float).

      3. 𝑪𝒐𝒎𝒑𝒍𝒆𝒙  -->> It is written in the form of 'x + yj' where x is real part and y is imaginary part.
      '''''''''''        :: j is compulsary in complex data type.
             
                   for Example -- a = 3 + 5j             x = -6 + 5j
                                  b = 4 + 9j             y = -34 + 4j

                     <::> 𝘾𝙝𝙚𝙘𝙠 𝘿𝙖𝙩𝙖 𝙏𝙮𝙥𝙚 -->> using type() function.
                                code - x = 10 + 5j
                                       print(x)          #output = 10 + 5j
                                       print(type(x))    #output = <class 'complex'>      (Data type of value is Complex).

           2. ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

|< 𝟐 >| -->>  𝗗𝗶𝗰𝘁𝗶𝗼𝗻𝗮𝗿𝘆 = It is an unordered collection of data values, used to store data values like a map in key-values pair.
""""""""""""""""""""""""
       :: 𝙲𝚛𝚎𝚊𝚝𝚒𝚗𝚐 𝙴𝚖𝚙𝚝𝚢 𝙳𝚒𝚌𝚝𝚒𝚘𝚗𝚊𝚛𝚢 -->>
                        d = {}
                        print(d)        #output - {}
                        print(type(d))  #output - <class 'dict'>

       :: 𝙲𝚛𝚎𝚊𝚝𝚒𝚗𝚐 𝙳𝚒𝚌𝚝𝚒𝚘𝚗𝚊𝚛𝚢 𝚠𝚒𝚝𝚑 𝙸𝚗𝚝𝚎𝚐𝚎𝚛 𝙺𝚎𝚢𝚜 -->>
                        d = {1:'value1' , 2:'value2' , 3:'value3'} 
                        print(d)      
                        print(type(d))  #output - <class 'dict'>

       :: 𝙲𝚛𝚎𝚊𝚝𝚒𝚗𝚐 𝙳𝚒𝚌𝚝𝚒𝚘𝚗𝚊𝚛𝚢 𝚠𝚒𝚝𝚑 𝙼𝚒𝚡𝚎𝚍 𝙺𝚎𝚢𝚜 -->>
                        d = {'Age':23 , 'Name':'Nikunj' , 'Streak';100 , 2;[1,2,3]}
                        print(d)      
                        print(type(d))  #output - <class 'dict'>

       :: 𝑷𝒓𝒊𝒏𝒕𝒊𝒏𝒈 𝑲𝒆𝒚𝒔 & 𝒗𝒂𝒍𝒖𝒆𝒔 -->>
                        x = {1:2 , 2:4 , 4:6 , 6:8}
                        print(x)
                        print(type(x))         #output = <class 'dict'>
                        print(x.keys())        #output = 1 , 2 , 4 , 6
                        print(x.values())      #output = 2 , 4 , 6 , 8

              <::> 𝘾𝙝𝙚𝙘𝙠 𝘿𝙖𝙩𝙖 𝙏𝙮𝙥𝙚 -->> using type() function.
                      code - x = {1:2 , 2:4 , 4:8}
                             print(x)          #output = {1:2 , 2:4 , 4:8}
                             print(type(x))    #output = <class 'dict'>      (Data type of value is Dictionary).

           3. ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

|< 𝟑 >| -->> 𝗕𝗼𝗼𝗹𝗲𝗮𝗻 = It is a data type with two in-built values. Perform only 'True' or 'False'.
"""""""""""""""""""""                        
             :: Objects of boolean may have execute only one in two values.
             :: bool() converts an argument to a boolean values.
             :: Invalid boolean -- true , false , TRUE , FALSE.

         code  -    x = 10
                    y = 20
                    result = x < y  
                    print(result)  # Output: True

         <::> 𝘾𝙝𝙚𝙘𝙠 𝘿𝙖𝙩𝙖 𝙏𝙮𝙥𝙚 -->> using type() function.
                   code - x = 10
                          y = 20
                          result = x < y         #output = True
                          print(type(result))    #output = <class 'bool'>      (Data type of value is Boolean).

            4. ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

|< 𝟒 >| --> 𝗦𝗲𝘁 = It contain unordered collection of elements which are iterable , but it cannot accept duplicate elements.
""""""""""""""""
           :: 𝙲𝚛𝚎𝚊𝚝𝚒𝚗𝚐 𝙴𝚖𝚙𝚝𝚢 𝚂𝚎𝚝 -->>
                       x = set()
                       print(x)

           :: 𝙲𝚛𝚎𝚊𝚝𝚒𝚗𝚐 𝙲𝚞𝚛𝚕𝚢 𝚋𝚛𝚊𝚌𝚔𝚎𝚝 𝚂𝚎𝚝 -->>
                   >>  x = {1,2,3,4,5}
                       print(x)     #output = 1,2,3,4,5

                :: Removing duplicate elements
                   >>  x = {1,2,3,2,4,3}
                       print(x)     #output = 1,2,3,4

           :: 𝙲𝚛𝚎𝚊𝚝𝚒𝚗𝚐 𝚘𝚛𝚍𝚎𝚛 𝚂𝚎𝚝 -->>
                    Simple >>  x = {[1,2,3,4,5}}
                             print(x)      #output = 1,2,3,4,5

                 Set Order >>  x = {[1,4,2,6,3,7,8]}
                             print(x)      #output = 1,2,3,4,6,7,8

           :: 𝙲𝚛𝚎𝚊𝚝𝚒𝚗𝚐 𝚜𝚎𝚝 𝚘𝚏 𝚌𝚑𝚊𝚛𝚊𝚌𝚝𝚎𝚛𝚜 𝚏𝚛𝚘𝚖 𝚂𝚝𝚛𝚒𝚗𝚐 -->>
                    >>  x = set("hello")
                        print(x)         # Output = {'e', 'h', 'l', 'o'}

                    >>  x = set("Programming")
                        print(x)   # Output = {'a', 'r', 'g', 'P', 'n', 'o', 'm', 'i'}

           :: 𝙲𝚛𝚎𝚊𝚝𝚒𝚗𝚐 𝙸𝚗𝚝𝚎𝚛𝚜𝚎𝚌𝚝𝚒𝚘𝚗 -->>
                    a = {1,2,3,4}
                    b = {4,5,6,7}
                    print(a & b)              # Output: {4}
                    print(a.intersection(b))  # Output: {4}

         <::> 𝘾𝙝𝙚𝙘𝙠 𝘿𝙖𝙩𝙖 𝙏𝙮𝙥𝙚 -->> using type() function.
                   code = x = {1,2,3,4,5}
                          print(x)     
                          print(type(x))    #output = <class 'set'>      (Data type of value is Set).

          5. ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

|< 𝟓 >| -->> 𝗦𝗲𝗾𝘂𝗲𝗻𝗰𝗲 𝗧𝘆𝗽𝗲 = 
"""""""""""""""""""""""""""

  𝟏. 𝑺𝒕𝒓𝒊𝒏𝒈 -->> It is referred as sequence of character defined inside single , double or triple quotes.
  ''''''''''     Note -- I am using x as String and STRINGINPYTHON as object for all methods.

        :1: 𝙄𝙣𝙙𝙚𝙭𝙞𝙣𝙜 <><>:   S   T   R   I   N   G   I   N   P   Y   T   H   O   N
                             0   1   2   3   4   5   6   7   8   9  10  11  12  13
                                    Left to Right ------------------>>>>>>

                                 <<<<<<------------------ Right to Left
                             S   T   R   I   N   G   I   N   P   Y   T   H   O   N
                           -14 -13 -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1

          𝙿𝚢𝚝𝚑𝚘𝚗 𝚌𝚘𝚍𝚎 -->>
            >>    x = "STRINGINPYTHON" 
                  print(x)             #output = STRINGINPYTHON

                   print("first Char = " + x[0])                   #output = first Char = S
                   print("Sixth Character = " + x[5])              #output = Sixth Character = G
                   print("Last Character = " + x[13])              #output = Last Character = N
                   print("Negative Below")                         #output = Negative Below
                   print("Last character by -ve = " + x[-1])       #output = Last character by -ve = N
                   print("Sixth character by -ve = " + x[-6])      #output = Sixth character by -ve = P

         :2: 𝙀𝙭𝙩𝙧𝙖𝙘𝙩𝙞𝙣𝙜 <><>:
           𝙿𝚘𝚛𝚝𝚒𝚘𝚗 >>  x = "STRINGINPYTHON" 
                        print(x)
                        print("Export character = " + x[1:6])   #output = Export character = TRING
                        print("Export character = " + x[8:14])  #output = Export character = PYTHON

           𝙻𝚎𝚗𝚐𝚝𝚑 >>   x = "STRINGINPYTHON"
                        print(len(x))         #output: 14
                        print(len(x[3:8]))    #output: 5

         :3: 𝘾𝙤𝙣𝙘𝙖𝙩𝙚𝙣𝙖𝙩𝙞𝙤𝙣 / 𝘾𝙤𝙢𝙗𝙞𝙣𝙞𝙣𝙜 <><>:
             >>   x = "STRING" 
                  y = "IN"
                  z = "PYTHON"
                  print(x + y + z)   #output = STRINGINPYTHON

                  Str = "String" + " " + "In" + " " + "Python"
                  print(Str)         #output = String In Python

         :4: 𝙍𝙚𝙥𝙚𝙩𝙞𝙩𝙞𝙤𝙣 <><>:
             >>   x = "String"
                  print(x)                    # 1   # 2   #3 (Repeated 3 times)
                  print(x * 3)     #output = StringStringString

         :5: 𝙎𝙩𝙧𝙞𝙣𝙜 𝙈𝙚𝙩𝙝𝙤𝙙𝙨 <><>::
              >>  x = "String in Python"
                  print(x.upper())                  # Output: STRING IN PYTHON
                  print(x.lower())                  # Output: string in python
                  print(x.capitalize())             # Output: String in python
                  print(x.replace("Python", "Java"))  # Output: String in Java
                  print(x.split())                  # Output: ['String', 'in', 'Python']

    <::> 𝘾𝙝𝙚𝙘𝙠 𝘿𝙖𝙩𝙖 𝙏𝙮𝙥𝙚 -->> using type() function.
                   code - x = "String in Python"
                          print(x)     
                          print(type(x))    #output = <class 'str'>      (Data type of value is String).

     𝟐. 𝑳𝒊𝒔𝒕 -->> it is defined as ordered collection of data items, which can be mixed data types.
    '''''''''      :: List is defined using [] bracket & seperate it by comma.

         𝙳𝚒𝚏𝚏𝚎𝚛𝚎𝚗𝚝 𝚝𝚢𝚙𝚎𝚜 𝚘𝚏 𝙻𝚒𝚜𝚝 -->>

               :1: List of integers 
                     numbers = [1, 2, 3, 4, 5]
                     print(numbers)
 
               :2: List of strings
                     fruits = ["apple", "banana", "cherry"]
                     print(fruits)
 
               :3: Mixed data types
                     mixed_list = [42, "hello", 3.14, True]
                     print(mixed_list)
 
               :4: Nested list
                     nested_list = [[1, 2], [3, 4]]
                     print(nested_list)
         
                 #output 1 = [1, 2, 3, 4, 5]
                         2 = ['apple', 'banana', 'cherry']
                         3 = [42, 'hello', 3.14, True]
                         4 = [[1, 2], [3, 4]]

               :5: Indexing
                    fruits = ["apple", "banana", "cherry"]
                    print(fruits[0])             # Output: 'apple'
                    print(fruits[-1])            # Output: 'cherry'

               :6: Slicing
                    fruits = ["apple", "banana", "cherry"]
                    print(fruits[0:2])  # Output: ['apple', 'banana']
                    print(fruits[1:])   # Output: ['banana', 'cherry']

         <::> 𝘾𝙝𝙚𝙘𝙠 𝘿𝙖𝙩𝙖 𝙏𝙮𝙥𝙚 -->>  Check any one in 4 codes.            
                :1: List of integers
                     numbers = [1, 2, 3, 4, 5]
                     print(numbers)
                     print(type(number))     #output = <class 'list'>      (Data type of value isList).

     𝟑.𝑻𝒖𝒑𝒍𝒆 -->> A tuple is an ordered and immutable sequence of elements. Tuples are similar to lists 
    ''''''''''     but cannot be modified after they are created. 
                     :: Tuples are defined using parentheses () or separating values with commas.

                 :1: Tuple with a single element (note the comma!)
                         x = (42,)
                         print(type(x))      #Output = <class 'tuple'>

                 :2: Tuple with multiple elements
                         tuple1 = (1, 2, 3)
                         print(tuple1)       #Output = 1, 2, 3

                 :3: Tuple with mixed data types
                         tuple2 = ("apple", 3.14, True)
                         print(tuple2)       #Output = apple, 3.14, True

                 :4: Tuple without parentheses (packing)
                         tuple3 = 1, 2, 3
                         print(tuple3)          # Output: (1, 2, 3)
                         print(type(tuple3))    #Output = <class 'tuple'>


                             <><><><><><><><><><><><><><><><><>
----------------------------<>--------------------------------<>----------------------------------




